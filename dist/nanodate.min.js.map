{"version":3,"file":"nanodate.min.js","sources":["../src/formatters.js","../src/matcher.js","../src/nanodate.js"],"sourcesContent":["/**\n * Formatters are based on moment tokens. They receives a\n * Date and returns it's format.\n */\nconst formatters = {\n    'DD': (date) => zero(date.getDate(), 2),\n    'D': (date) => date.getDate() + '',\n    'MM': (date) => zero(date.getMonth() + 1, 2),\n    'M': (date) => (date.getMonth() + 1) + '',\n    'YYYY': (date) => zero(date.getFullYear(), 4),\n    'YY': (date) => (date.getFullYear() + '').substr(-2, 2),\n    'HH': (date) => zero(date.getHours(), 2),\n    'H': (date) => date.getHours() + '',\n    'mm': (date) => zero(date.getMinutes(), 2),\n    'm': (date) => date.getMinutes() + '',\n    'ss': (date) => zero(date.getSeconds(), 2),\n    's': (date) => date.getSeconds() + '',\n};\n/**\n * Add '0' pads to number value.\n */\nfunction zero(value, length) {\n    let string = value + '';\n    while (string.length < length)\n        string = '0' + string;\n    return string;\n}\nexport default formatters;\n","import formatters from './formatters';\n/**\n * Creates a matcher using formatters tokens and escape strategy.\n */\nfunction createMatcher() {\n    const ESCAPE = '\\\\[[^\\\\[\\\\]]*\\\\]';\n    const matchers = Object.keys(formatters).concat(ESCAPE);\n    return new RegExp(matchers.join('|'), 'g');\n}\nexport default createMatcher();\n","import formatters from './formatters';\nimport matcher from './matcher';\n/**\n * It replaces format tokens for corresponding Date formats.\n * @example ```js\n * nanodate(new Date(), 'DD/MM/YYYY hh:mm:ss')\n * ```\n * @param date A Date instace.\n * @param format A string with tokens based on moment.\n */\nfunction nanodate(date, format) {\n    return format.replace(matcher, (token) => {\n        if (formatters.hasOwnProperty(token))\n            return formatters[token](date);\n        return token.replace(/\\[|\\]/g, '');\n    });\n}\nexport default nanodate;\n"],"names":["const","formatters","date","zero","getDate","getMonth","getFullYear","substr","getHours","getMinutes","getSeconds","value","length","string","matchers","Object","keys","concat","RegExp","join","format","replace","matcher","token","hasOwnProperty"],"mappings":"oLAIAA,IAAMC,eACKC,UAASC,EAAKD,EAAKE,UAAW,eAC/BF,UAASA,EAAKE,UAAY,gBACzBF,UAASC,EAAKD,EAAKG,WAAa,EAAG,eACpCH,UAAUA,EAAKG,WAAa,EAAK,kBAC9BH,UAASC,EAAKD,EAAKI,cAAe,gBACpCJ,UAAUA,EAAKI,cAAgB,IAAIC,QAAQ,EAAG,gBAC9CL,UAASC,EAAKD,EAAKM,WAAY,eAChCN,UAASA,EAAKM,WAAa,gBAC1BN,UAASC,EAAKD,EAAKO,aAAc,eAClCP,UAASA,EAAKO,aAAe,gBAC5BP,UAASC,EAAKD,EAAKQ,aAAc,eAClCR,UAASA,EAAKQ,aAAe,KAKvC,SAASP,EAAKQ,EAAOC,WACbC,EAASF,EAAQ,GACdE,EAAOD,OAASA,GACnBC,EAAS,IAAMA,SACZA,MCnBDC,KAAAA,EAAWC,OAAOC,KAAKf,GAAYgB,OAD1B,oBAER,IAAIC,OAAOJ,EAASK,KAAK,KAAM,aCG1C,SAAkBjB,EAAMkB,UACbA,EAAOC,QAAQC,WAAUC,UACxBtB,EAAWuB,eAAeD,GACnBtB,EAAWsB,GAAOrB,GACtBqB,EAAMF,QAAQ,SAAU"}